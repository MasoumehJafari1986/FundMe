{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeed",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contributor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FundReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "message4",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gasCost",
          "type": "uint256"
        }
      ],
      "name": "GasCost",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "message5",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "investor",
          "type": "address"
        }
      ],
      "name": "Refund",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "message1",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "message2",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "funder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "message3",
          "type": "string"
        }
      ],
      "name": "Withdrawal",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fundingAddress",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "userAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "refundAmount",
          "type": "uint256"
        }
      ],
      "name": "refund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "s_funders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xfc520d8207f25cca197c4df9a3f004041361a2b6281472af58c471ba5ea73f9c",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "1571683",
    "logsBloom": "0x
    "blockHash": "0x8c9ff0b4d74a15d0efcd4fd0f7528a147a9f4f521bf3b62792e43b8a6296b60e",
    "transactionHash": "0xfc520d8207f25cca197c4df9a3f004041361a2b6281472af58c471ba5ea73f9c",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "1571683",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "2946f9e7d2d4063b906fbbe99ceae943",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeed\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message4\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasCost\",\"type\":\"uint256\"}],\"name\":\"GasCost\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message5\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"Refund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message1\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message2\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message3\",\"type\":\"string\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundingAddress\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"refundAmount\",\"type\":\"uint256\"}],\"name\":\"refund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_funders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Patrick Collins\",\"details\":\"This implements price feeds as our library\",\"kind\":\"dev\",\"methods\":{\"getAddressToAmountFunded(address)\":{\"params\":{\"fundingAddress\":\"the address of the funder\"},\"returns\":{\"_0\":\"the amount funded\"}}},\"title\":\"A sample Funding Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"Funds our contract based on the ETH/USD price\"},\"getAddressToAmountFunded(address)\":{\"notice\":\"Gets the amount that an address has funded\"}},\"notice\":\"This contract is for creating a sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// 1. Pragma\\npragma solidity ^0.8.7;\\n// 2. Imports\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n\\n// 3. Interfaces, Libraries, Contracts\\nerror FundMe__NotOwner();\\n\\n/**@title A sample Funding Contract\\n * @author Patrick Collins\\n * @notice This contract is for creating a sample funding contract\\n * @dev This implements price feeds as our library\\n */\\ncontract FundMe {\\n    // Type Declarations\\n    using PriceConverter for uint256;\\n\\n    // State variables\\n    uint256 public constant MINIMUM_USD = 5; //50 * 10**18;\\n    address private immutable i_owner;\\n    address[] public s_funders;\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n    AggregatorV3Interface private s_priceFeed;\\n\\n\\n    // Events (we have none!)\\n    event FundReceived(address indexed contributor, uint256 amount);\\n    event Withdrawal(address sender, string message1, uint256 amount, string message2, address funder, string message3);\\n    event GasCost(string message4, uint256 gasCost);\\n    event Refund(uint256 amount, string message5, address investor);\\n\\n\\n\\n\\n    // Modifiers\\n    modifier onlyOwner() {\\n        // require(msg.sender == i_owner);\\n        if (msg.sender != i_owner) revert FundMe__NotOwner();\\n        _;\\n    }\\n\\n    // Functions Order:\\n    //// constructor\\n    //// receive\\n    //// fallback\\n    //// external\\n    //// public\\n    //// internal\\n    //// private\\n    //// view / pure\\n\\n\\n\\n\\n    constructor(address priceFeed) {\\n        s_priceFeed = AggregatorV3Interface(priceFeed);\\n        i_owner = msg.sender;\\n    }\\n\\n    /// @notice Funds our contract based on the ETH/USD price\\n    function fund() public payable {\\n        require(\\n            msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\\n            \\\"You need to spend more ETH!\\\"\\n        );\\n        // require(PriceConverter.getConversionRate(msg.value) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\n        s_funders.push(msg.sender);\\n        emit FundReceived(msg.sender, msg.value.getConversionRate(s_priceFeed));\\n\\n    }\\n    function withdraw() public onlyOwner {\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < s_funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        //uint balanceBeforeWithdrawal = address(this).balance;\\n        // Transfer vs call vs Send\\n        // payable(msg.sender).transfer(address(this).balance);\\n        // (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        // require(success, \\\"call failed\\\");\\n        payable(i_owner).transfer(address(this).balance);\\n        (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        require(success);\\n        emit Withdrawal(msg.sender, \\\"sent \\\", address(this).balance,\\\" to\\\",i_owner, \\\" successfully\\\");\\n\\n    }\\n\\n    function cheaperWithdraw() public onlyOwner {\\n        address[] memory funders = s_funders;\\n        // mappings can't be in memory, sorry!\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        // payable(msg.sender).transfer(address(this).balance);\\n        (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        require(success);\\n    }\\n\\n    /** @notice Gets the amount that an address has funded\\n     *  @param fundingAddress the address of the funder\\n     *  @return the amount funded\\n     */\\n    function getAddressToAmountFunded(address fundingAddress)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return s_addressToAmountFunded[fundingAddress];\\n    }\\n\\n   // function getVersion() public view returns (uint256) {\\n   //     return s_priceFeed.version();\\n   // }\\n\\n    function getFunder(uint256 index) public view returns (address) {\\n        return s_funders[index];\\n    }\\n\\n  //  function getOwner() public view returns (address) {\\n   //     return i_owner;\\n   // }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n\\n\\n    function refund(address payable userAddress, uint256 refundAmount) public onlyOwner {\\n        require(userAddress != address(0), \\\"User address is undefined\\\");\\n        //require(Address.isContract(userAddress), \\\"User address is not a contract\\\");\\n        require(s_addressToAmountFunded[userAddress] > 0, \\\"User has not sent any money to the contract yet\\\");\\n        uint256 netAmountFunded = s_addressToAmountFunded[userAddress]; //- contributions[userAddress];\\n        require(refundAmount <= netAmountFunded, \\\"Refund amount is more than the net amount funded\\\");\\n        uint256 gasCost = tx.gasprice * 21000; // 21000 is the gas cost for a transfer\\n        emit GasCost(\\\"Gas cost is:\\\", gasCost);\\n\\n        require(refundAmount + gasCost <= address(this).balance, \\\"Not enough funds in the contract to refund\\\");\\n        s_addressToAmountFunded[userAddress] -= refundAmount;\\n        userAddress.transfer(refundAmount - gasCost);\\n        emit Refund(refundAmount - gasCost, \\\"successfully refunded to\\\", userAddress);\\n\\n    }\\n    \\n\\n\\n}\\n\\n\\n\\n\",\"keccak256\":\"0xf0e314956c6c07eacb1edaf135612403a8553f00b12d919d674b8cac8d00ca92\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConverter {\\n  function getPrice(AggregatorV3Interface priceFeed)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    (, int256 answer, , , ) = priceFeed.latestRoundData();\\n    // ETH/USD rate in 18 digit\\n    return uint256(answer * 10000000000);\\n  }\\n\\n  // 1000000000\\n  // call it get fiatConversionRate, since it assumes something about decimals\\n  // It wouldn't work for every aggregator\\n  function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    uint256 ethPrice = getPrice(priceFeed);\\n    uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\n    // the actual ETH/USD conversation rate, after adjusting the extra 0s.\\n    return ethAmountInUsd;\\n  }\\n}\\n\",\"keccak256\":\"0x85e1796e8ea7d1ae7df679124784e93ec9bada2bb235a8a1be214bff6462629c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162001cbb38038062001cbb8339818101604052810190620000379190620000cd565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b815250505062000152565b600081519050620000c78162000138565b92915050565b600060208284031215620000e657620000e562000133565b5b6000620000f684828501620000b6565b91505092915050565b60006200010c8262000113565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b6200014381620000ff565b81146200014f57600080fd5b50565b60805160601c611b206200019b60003960008181610244015281816103d50152818161043e015281816104f50152818161053001528181610ada0152610cd00152611b206000f3fe6080604052600436106100865760003560e01c80636b69a592116100595780636b69a592146101455780639e87a5cd14610170578063b60d42881461019b578063be2693f0146101a5578063d7b4750c146101bc57610086565b80630343fb251461008b5780633ccfd60b146100c8578063410085df146100df57806354861af714610108575b600080fd5b34801561009757600080fd5b506100b260048036038101906100ad9190610fae565b6101f9565b6040516100bf9190611409565b60405180910390f35b3480156100d457600080fd5b506100dd610242565b005b3480156100eb57600080fd5b5061010660048036038101906101019190610fdb565b61052e565b005b34801561011457600080fd5b5061012f600480360381019061012a919061101b565b6108b5565b60405161013c9190611295565b60405180910390f35b34801561015157600080fd5b5061015a6108f4565b6040516101679190611409565b60405180910390f35b34801561017c57600080fd5b506101856108f9565b6040516101929190611320565b60405180910390f35b6101a3610923565b005b3480156101b157600080fd5b506101ba610ad8565b005b3480156101c857600080fd5b506101e360048036038101906101de919061101b565b610d66565b6040516101f09190611295565b60405180910390f35b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102c7576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6000805490508110156103725760008082815481106102ec576102eb611805565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061036a9061175e565b9150506102ca565b50600067ffffffffffffffff81111561038e5761038d611834565b5b6040519080825280602002602001820160405280156103bc5781602001602082028036833780820191505090505b50600090805190602001906103d2929190610e89565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015610439573d6000803e3d6000fd5b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161048090611280565b60006040518083038185875af1925050503d80600081146104bd576040519150601f19603f3d011682016040523d82523d6000602084013e6104c2565b606091505b50509050806104d057600080fd5b7f86c8b3fe5cdf1f42c50c8745455206d24bb637ed5afe24075813b808ab62732933477f0000000000000000000000000000000000000000000000000000000000000000604051610523939291906112b0565b60405180910390a150565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105b3576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610623576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061a9061133b565b60405180910390fd5b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054116106a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069c906113bb565b60405180910390fd5b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508082111561072c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107239061139b565b60405180910390fd5b60006152083a61073c919061161a565b90507f9c8133187fb8ebbff36bdda7e76f25c25ceb2f95ae3ad46aa0d5ffd2c1ad27c18160405161076d91906113db565b60405180910390a1478184610782919061147c565b11156107c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ba9061135b565b60405180910390fd5b82600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546108129190611674565b925050819055508373ffffffffffffffffffffffffffffffffffffffff166108fc828561083f9190611674565b9081150290604051600060405180830381858888f1935050505015801561086a573d6000803e3d6000fd5b507f02a81519bc34b7d126a5e787e78a239c21ea38fafcb6efc87bae1d88705706e881846108989190611674565b856040516108a7929190611424565b60405180910390a150505050565b600081815481106108c557600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600581565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600561095a600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1634610dad90919063ffffffff16565b101561099b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109929061137b565b60405180910390fd5b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546109ea919061147c565b925050819055506000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f54a5b8782470a0d2c022b3b9e5e729503ac5dbdfe053afeb4559f9297f7565a6610ac1600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1634610dad90919063ffffffff16565b604051610ace9190611409565b60405180910390a2565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610b5d576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080805480602002602001604051908101604052809291908181526020018280548015610be057602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610b96575b5050505050905060005b8151811015610c6b576000828281518110610c0857610c07611805565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550508080610c639061175e565b915050610bea565b50600067ffffffffffffffff811115610c8757610c86611834565b5b604051908082528060200260200182016040528015610cb55781602001602082028036833780820191505090505b5060009080519060200190610ccb929190610e89565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1647604051610d1290611280565b60006040518083038185875af1925050503d8060008114610d4f576040519150601f19603f3d011682016040523d82523d6000602084013e610d54565b606091505b5050905080610d6257600080fd5b5050565b6000808281548110610d7b57610d7a611805565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600080610db983610de9565b90506000670de0b6b3a76400008583610dd2919061161a565b610ddc91906114d2565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610e3257600080fd5b505afa158015610e46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e6a9190611048565b5050509150506402540be40081610e819190611503565b915050919050565b828054828255906000526020600020908101928215610f02579160200282015b82811115610f015782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610ea9565b5b509050610f0f9190610f13565b5090565b5b80821115610f2c576000816000905550600101610f14565b5090565b600081359050610f3f81611a77565b92915050565b600081359050610f5481611a8e565b92915050565b600081519050610f6981611aa5565b92915050565b600081359050610f7e81611abc565b92915050565b600081519050610f9381611abc565b92915050565b600081519050610fa881611ad3565b92915050565b600060208284031215610fc457610fc3611863565b5b6000610fd284828501610f30565b91505092915050565b60008060408385031215610ff257610ff1611863565b5b600061100085828601610f45565b925050602061101185828601610f6f565b9150509250929050565b60006020828403121561103157611030611863565b5b600061103f84828501610f6f565b91505092915050565b600080600080600060a0868803121561106457611063611863565b5b600061107288828901610f99565b955050602061108388828901610f5a565b945050604061109488828901610f84565b93505060606110a588828901610f84565b92505060806110b688828901610f99565b9150509295509295909350565b6110cc81611716565b82525050565b6110db816116a8565b82525050565b6110ea81611728565b82525050565b60006110fd600d8361146b565b915061110882611868565b602082019050919050565b600061112060198361146b565b915061112b82611891565b602082019050919050565b6000611143602a8361146b565b915061114e826118ba565b604082019050919050565b6000611166601b8361146b565b915061117182611909565b602082019050919050565b600061118960058361146b565b915061119482611932565b602082019050919050565b60006111ac60308361146b565b91506111b78261195b565b604082019050919050565b60006111cf600083611460565b91506111da826119aa565b600082019050919050565b60006111f2602f8361146b565b91506111fd826119ad565b604082019050919050565b600061121560038361146b565b9150611220826119fc565b602082019050919050565b6000611238600c8361146b565b915061124382611a25565b602082019050919050565b600061125b60188361146b565b915061126682611a4e565b602082019050919050565b61127a816116f6565b82525050565b600061128b826111c2565b9150819050919050565b60006020820190506112aa60008301846110d2565b92915050565b600060c0820190506112c560008301866110d2565b81810360208301526112d68161117c565b90506112e56040830185611271565b81810360608301526112f681611208565b905061130560808301846110d2565b81810360a0830152611316816110f0565b9050949350505050565b600060208201905061133560008301846110e1565b92915050565b6000602082019050818103600083015261135481611113565b9050919050565b6000602082019050818103600083015261137481611136565b9050919050565b6000602082019050818103600083015261139481611159565b9050919050565b600060208201905081810360008301526113b48161119f565b9050919050565b600060208201905081810360008301526113d4816111e5565b9050919050565b600060408201905081810360008301526113f48161122b565b90506114036020830184611271565b92915050565b600060208201905061141e6000830184611271565b92915050565b60006060820190506114396000830185611271565b818103602083015261144a8161124e565b905061145960408301846110c3565b9392505050565b600081905092915050565b600082825260208201905092915050565b6000611487826116f6565b9150611492836116f6565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156114c7576114c66117a7565b5b828201905092915050565b60006114dd826116f6565b91506114e8836116f6565b9250826114f8576114f76117d6565b5b828204905092915050565b600061150e826116cc565b9150611519836116cc565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615611558576115576117a7565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615611595576115946117a7565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156115d2576115d16117a7565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561160f5761160e6117a7565b5b828202905092915050565b6000611625826116f6565b9150611630836116f6565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611669576116686117a7565b5b828202905092915050565b600061167f826116f6565b915061168a836116f6565b92508282101561169d5761169c6117a7565b5b828203905092915050565b60006116b3826116d6565b9050919050565b60006116c5826116d6565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600069ffffffffffffffffffff82169050919050565b60006117218261173a565b9050919050565b60006117338261173a565b9050919050565b60006117458261174c565b9050919050565b6000611757826116d6565b9050919050565b6000611769826116f6565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561179c5761179b6117a7565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b7f207375636365737366756c6c7900000000000000000000000000000000000000600082015250565b7f55736572206164647265737320697320756e646566696e656400000000000000600082015250565b7f4e6f7420656e6f7567682066756e647320696e2074686520636f6e747261637460008201527f20746f20726566756e6400000000000000000000000000000000000000000000602082015250565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b7f73656e7420000000000000000000000000000000000000000000000000000000600082015250565b7f526566756e6420616d6f756e74206973206d6f7265207468616e20746865206e60008201527f657420616d6f756e742066756e64656400000000000000000000000000000000602082015250565b50565b7f5573657220686173206e6f742073656e7420616e79206d6f6e657920746f207460008201527f686520636f6e7472616374207965740000000000000000000000000000000000602082015250565b7f20746f0000000000000000000000000000000000000000000000000000000000600082015250565b7f47617320636f73742069733a0000000000000000000000000000000000000000600082015250565b7f7375636365737366756c6c7920726566756e64656420746f0000000000000000600082015250565b611a80816116a8565b8114611a8b57600080fd5b50565b611a97816116ba565b8114611aa257600080fd5b50565b611aae816116cc565b8114611ab957600080fd5b50565b611ac5816116f6565b8114611ad057600080fd5b50565b611adc81611700565b8114611ae757600080fd5b5056fea264697066735822122097cab9fd50ec744f068a18c72903c7840af7f51e9819155753768f169f22d04e64736f6c63430008070033",
  "deployedBytecode": "0x6080604052600436106100865760003560e01c80636b69a592116100595780636b69a592146101455780639e87a5cd14610170578063b60d42881461019b578063be2693f0146101a5578063d7b4750c146101bc57610086565b80630343fb251461008b5780633ccfd60b146100c8578063410085df146100df57806354861af714610108575b600080fd5b34801561009757600080fd5b506100b260048036038101906100ad9190610fae565b6101f9565b6040516100bf9190611409565b60405180910390f35b3480156100d457600080fd5b506100dd610242565b005b3480156100eb57600080fd5b5061010660048036038101906101019190610fdb565b61052e565b005b34801561011457600080fd5b5061012f600480360381019061012a919061101b565b6108b5565b60405161013c9190611295565b60405180910390f35b34801561015157600080fd5b5061015a6108f4565b6040516101679190611409565b60405180910390f35b34801561017c57600080fd5b506101856108f9565b6040516101929190611320565b60405180910390f35b6101a3610923565b005b3480156101b157600080fd5b506101ba610ad8565b005b3480156101c857600080fd5b506101e360048036038101906101de919061101b565b610d66565b6040516101f09190611295565b60405180910390f35b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102c7576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6000805490508110156103725760008082815481106102ec576102eb611805565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061036a9061175e565b9150506102ca565b50600067ffffffffffffffff81111561038e5761038d611834565b5b6040519080825280602002602001820160405280156103bc5781602001602082028036833780820191505090505b50600090805190602001906103d2929190610e89565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015610439573d6000803e3d6000fd5b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161048090611280565b60006040518083038185875af1925050503d80600081146104bd576040519150601f19603f3d011682016040523d82523d6000602084013e6104c2565b606091505b50509050806104d057600080fd5b7f86c8b3fe5cdf1f42c50c8745455206d24bb637ed5afe24075813b808ab62732933477f0000000000000000000000000000000000000000000000000000000000000000604051610523939291906112b0565b60405180910390a150565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105b3576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610623576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061a9061133b565b60405180910390fd5b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054116106a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069c906113bb565b60405180910390fd5b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508082111561072c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107239061139b565b60405180910390fd5b60006152083a61073c919061161a565b90507f9c8133187fb8ebbff36bdda7e76f25c25ceb2f95ae3ad46aa0d5ffd2c1ad27c18160405161076d91906113db565b60405180910390a1478184610782919061147c565b11156107c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ba9061135b565b60405180910390fd5b82600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546108129190611674565b925050819055508373ffffffffffffffffffffffffffffffffffffffff166108fc828561083f9190611674565b9081150290604051600060405180830381858888f1935050505015801561086a573d6000803e3d6000fd5b507f02a81519bc34b7d126a5e787e78a239c21ea38fafcb6efc87bae1d88705706e881846108989190611674565b856040516108a7929190611424565b60405180910390a150505050565b600081815481106108c557600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600581565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600561095a600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1634610dad90919063ffffffff16565b101561099b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109929061137b565b60405180910390fd5b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546109ea919061147c565b925050819055506000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f54a5b8782470a0d2c022b3b9e5e729503ac5dbdfe053afeb4559f9297f7565a6610ac1600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1634610dad90919063ffffffff16565b604051610ace9190611409565b60405180910390a2565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610b5d576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080805480602002602001604051908101604052809291908181526020018280548015610be057602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610b96575b5050505050905060005b8151811015610c6b576000828281518110610c0857610c07611805565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550508080610c639061175e565b915050610bea565b50600067ffffffffffffffff811115610c8757610c86611834565b5b604051908082528060200260200182016040528015610cb55781602001602082028036833780820191505090505b5060009080519060200190610ccb929190610e89565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1647604051610d1290611280565b60006040518083038185875af1925050503d8060008114610d4f576040519150601f19603f3d011682016040523d82523d6000602084013e610d54565b606091505b5050905080610d6257600080fd5b5050565b6000808281548110610d7b57610d7a611805565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600080610db983610de9565b90506000670de0b6b3a76400008583610dd2919061161a565b610ddc91906114d2565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610e3257600080fd5b505afa158015610e46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e6a9190611048565b5050509150506402540be40081610e819190611503565b915050919050565b828054828255906000526020600020908101928215610f02579160200282015b82811115610f015782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610ea9565b5b509050610f0f9190610f13565b5090565b5b80821115610f2c576000816000905550600101610f14565b5090565b600081359050610f3f81611a77565b92915050565b600081359050610f5481611a8e565b92915050565b600081519050610f6981611aa5565b92915050565b600081359050610f7e81611abc565b92915050565b600081519050610f9381611abc565b92915050565b600081519050610fa881611ad3565b92915050565b600060208284031215610fc457610fc3611863565b5b6000610fd284828501610f30565b91505092915050565b60008060408385031215610ff257610ff1611863565b5b600061100085828601610f45565b925050602061101185828601610f6f565b9150509250929050565b60006020828403121561103157611030611863565b5b600061103f84828501610f6f565b91505092915050565b600080600080600060a0868803121561106457611063611863565b5b600061107288828901610f99565b955050602061108388828901610f5a565b945050604061109488828901610f84565b93505060606110a588828901610f84565b92505060806110b688828901610f99565b9150509295509295909350565b6110cc81611716565b82525050565b6110db816116a8565b82525050565b6110ea81611728565b82525050565b60006110fd600d8361146b565b915061110882611868565b602082019050919050565b600061112060198361146b565b915061112b82611891565b602082019050919050565b6000611143602a8361146b565b915061114e826118ba565b604082019050919050565b6000611166601b8361146b565b915061117182611909565b602082019050919050565b600061118960058361146b565b915061119482611932565b602082019050919050565b60006111ac60308361146b565b91506111b78261195b565b604082019050919050565b60006111cf600083611460565b91506111da826119aa565b600082019050919050565b60006111f2602f8361146b565b91506111fd826119ad565b604082019050919050565b600061121560038361146b565b9150611220826119fc565b602082019050919050565b6000611238600c8361146b565b915061124382611a25565b602082019050919050565b600061125b60188361146b565b915061126682611a4e565b602082019050919050565b61127a816116f6565b82525050565b600061128b826111c2565b9150819050919050565b60006020820190506112aa60008301846110d2565b92915050565b600060c0820190506112c560008301866110d2565b81810360208301526112d68161117c565b90506112e56040830185611271565b81810360608301526112f681611208565b905061130560808301846110d2565b81810360a0830152611316816110f0565b9050949350505050565b600060208201905061133560008301846110e1565b92915050565b6000602082019050818103600083015261135481611113565b9050919050565b6000602082019050818103600083015261137481611136565b9050919050565b6000602082019050818103600083015261139481611159565b9050919050565b600060208201905081810360008301526113b48161119f565b9050919050565b600060208201905081810360008301526113d4816111e5565b9050919050565b600060408201905081810360008301526113f48161122b565b90506114036020830184611271565b92915050565b600060208201905061141e6000830184611271565b92915050565b60006060820190506114396000830185611271565b818103602083015261144a8161124e565b905061145960408301846110c3565b9392505050565b600081905092915050565b600082825260208201905092915050565b6000611487826116f6565b9150611492836116f6565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156114c7576114c66117a7565b5b828201905092915050565b60006114dd826116f6565b91506114e8836116f6565b9250826114f8576114f76117d6565b5b828204905092915050565b600061150e826116cc565b9150611519836116cc565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615611558576115576117a7565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615611595576115946117a7565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156115d2576115d16117a7565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561160f5761160e6117a7565b5b828202905092915050565b6000611625826116f6565b9150611630836116f6565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611669576116686117a7565b5b828202905092915050565b600061167f826116f6565b915061168a836116f6565b92508282101561169d5761169c6117a7565b5b828203905092915050565b60006116b3826116d6565b9050919050565b60006116c5826116d6565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600069ffffffffffffffffffff82169050919050565b60006117218261173a565b9050919050565b60006117338261173a565b9050919050565b60006117458261174c565b9050919050565b6000611757826116d6565b9050919050565b6000611769826116f6565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561179c5761179b6117a7565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b7f207375636365737366756c6c7900000000000000000000000000000000000000600082015250565b7f55736572206164647265737320697320756e646566696e656400000000000000600082015250565b7f4e6f7420656e6f7567682066756e647320696e2074686520636f6e747261637460008201527f20746f20726566756e6400000000000000000000000000000000000000000000602082015250565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b7f73656e7420000000000000000000000000000000000000000000000000000000600082015250565b7f526566756e6420616d6f756e74206973206d6f7265207468616e20746865206e60008201527f657420616d6f756e742066756e64656400000000000000000000000000000000602082015250565b50565b7f5573657220686173206e6f742073656e7420616e79206d6f6e657920746f207460008201527f686520636f6e7472616374207965740000000000000000000000000000000000602082015250565b7f20746f0000000000000000000000000000000000000000000000000000000000600082015250565b7f47617320636f73742069733a0000000000000000000000000000000000000000600082015250565b7f7375636365737366756c6c7920726566756e64656420746f0000000000000000600082015250565b611a80816116a8565b8114611a8b57600080fd5b50565b611a97816116ba565b8114611aa257600080fd5b50565b611aae816116cc565b8114611ab957600080fd5b50565b611ac5816116f6565b8114611ad057600080fd5b50565b611adc81611700565b8114611ae757600080fd5b5056fea264697066735822122097cab9fd50ec744f068a18c72903c7840af7f51e9819155753768f169f22d04e64736f6c63430008070033",
  "devdoc": {
    "author": "Patrick Collins",
    "details": "This implements price feeds as our library",
    "kind": "dev",
    "methods": {
      "getAddressToAmountFunded(address)": {
        "params": {
          "fundingAddress": "the address of the funder"
        },
        "returns": {
          "_0": "the amount funded"
        }
      }
    },
    "title": "A sample Funding Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fund()": {
        "notice": "Funds our contract based on the ETH/USD price"
      },
      "getAddressToAmountFunded(address)": {
        "notice": "Gets the amount that an address has funded"
      }
    },
    "notice": "This contract is for creating a sample funding contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 394,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 398,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 401,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}